<style type="text/css">
    #networkViz {
        width: 400px;
        height: 400px;
        border: 1px solid lightgray;
    }
</style>

<div class="row">
    <div class="col-xs-6">
        <h3>Relationships</h3>
        <table class="table">
            <tbody id="relTableBody">
                <tr>
                    <th>From</th>
                    <th>Name</th>
                    <th>To</th>
                </tr>

            </tbody>
            <tfoot>
            <tr>
                <td></td>
                <td></td>
                <td><button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#newRelModal">Create New</button></td>
            </tr>
            </tfoot>
        </table>
    </div>
    <div class="col-xs-6" id="networkViz">
        <!-- <img src="http://placehold.it/350x400"> -->
    </div>
</div>
<form action="/datamodel" method="post">
<!--<div class="row"> -->

    <div>

        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            {{#each files}}
                <li role="presentation"><a href="#{{stripstr this}}" aria-controls="{{stripstr this}}" role="tab" data-toggle="tab">{{this}}</a></li>
            {{/each}}


        </ul>

        <!-- Tab panes -->
        <div class="tab-content">
            {{#each files}}
                <div role="tabpanel" class="tab-pane" data-filename="{{this}}" id="{{stripstr this}}">

                    <div class="row">
                    <div class="btn-group" role="group" aria-label="nodeRelSelect" style="padding:20px;">
                        <button id="{{stripstr this}}-node-button" type="button" class="btn btn-default active">Node</button>
                        <button id="{{stripstr this}}-rel-button" type="button" class="btn btn-default" disabled>Relationship</button>
                    </div>
                        </div>
                    <div id="{{stripstr this}}-datamodel-pane">
                    <div class="row">
                        <div class="col-sm-6">
                    <div class="form-group">

                        <label for="{{stripstr this}}LabelInput" class="col-sm-2 control-label">Label</label>
                        <div class="col-sm-10" style="padding:20px;">
                            <input type="text" class="form-control labelInput" name="{{stripstr this}}LabelInput" data-id="{{this}}" id="{{this}}LabelInput" placeholder="Node" required>
                        </div>
                    </div>
                        </div>

                    </div>


                    <table class="table">
                        <tbody>
                            <tr>
                                <th>Column</th>
                                <th>Rename</th>
                                <th>Skip</th>
                                <th>PK</th>
                                <th>Datatype</th>
                                <th>Create Index</th>
                                <th>FK</th>
                            </tr>
                            {{datamodelTable this ../this ../this.config}}
                        </tbody>
                    </table>
                    </div>
                    <h3 id="{{stripstr this}}-rel-message" style="display:none;">Please configure this relationship using "Create New" relationship button above.</h3>
                </div>
            {{/each}}

        </div>

    </div>
<!-- </div> -->

<div class="row">
    <div class="col-md-3 col-md-offset-9">
        <button type="submit" id="submit" class="btn btn-success">Next</button>
    </div>

</div>
    </form>

<!-- Modal -->
<div class="modal fade" id="newRelModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <button type="button" class="close"
                        data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    Create Relationship
                </h4>
            </div>

            <!-- Modal Body -->
            <div class="modal-body">

                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="fromInput" class="col-sm-2 control-label">From</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="fromInput" placeholder="Legislator:thomasID">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="nameInput" class="col-sm-2 control-label">Relationship name</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="nameInput" placeholder="SERVES_ON">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="toInput" class="col-sm-2 control-label">To</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="toInput" placeholder="Committee:committeeID">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="filenameInput" class="col-sm-2 control-label">Filename</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="filenameInput" placeholder="legislators.csv">
                        </div>
                    </div>

                </form>

            <!-- Modal Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    Close
                </button>
                <button type="button" id="createRelButton" class="btn btn-primary" data-dismiss="modal">
                    Create
                </button>
            </div>
        </div>
    </div>
</div>
    </div>


<script>
    var configData = JSON.parse('{{{stringify this.config}}}');
    console.log(configData);
    var network; // network viz

    // iterate through all relationships and hide the filename-node-pane element for that file
    // toggle the node button off
    // toggle the relationship button on

    _.forEach(configData.relationships, function(relObject) {
       var filename = relObject.filename.split(".").join("");
        console.log(filename);
        $('#'+filename +'-datamodel-pane').hide();
        $('#'+filename + '-node-button').prop('disabled', true).removeClass("active");
        $('#'+filename + '-rel-button').prop('disabled', false).addClass("active");
        $('#'+filename + '-rel-message').show();

    });

    // TODO: update config data as form is updated
    // benefits of this:
    //  - can update visual with standard data format
    //  - easier (client side) validation

    $(function() {
        // set first tab as active
        $('.nav-tabs li').first().addClass("active");
        $('.tab-pane').first().addClass("active");

        // FIXME: exactly one PK per file must be selected for each file
        //$('#submit').click(function(e) {
        //    if ($('.pkcheckbox:checkbox:checked').length != 1) {
        //        e.preventDefault();
        //        console.log($('.pkcheckbox:checkbox:checked').length);
        //        alert("Exactly one Primary Key field must be selected");
        //    }

        //})

        $('#createRelButton').click(function(e) {
            // pass nodes and relationships objects from server
            // get parameters from relationship form
            // update relationships object
            // create data for vis.js
            // update vis.js rendering




        });

        // create an array with nodes
        //var nodes = new vis.DataSet([
        //    {id: 1, label: 'Node 1'},
        //    {id: 2, label: 'Node 2'},
        //    {id: 3, label: 'Node 3'},
        //    {id: 4, label: 'Node 4'},
        //    {id: 5, label: 'Node 5'}
        //]);

        // create an array with edges
        //var edges = new vis.DataSet([
        //    {from: 1, to: 3},
        //    {from: 1, to: 2},
        //    {from: 2, to: 4},
        //    {from: 2, to: 5}
        //]);

        function populateRelationshipTable() {

        }

        function drawNetworkViz() {
            var nodesArr = [];
            $.each(configData.nodes, function(i, el){
                console.log(el);
                var name = '';
                if (el.labels) {
                    name = el.labels[0];
                } else {
                    name = el.filename || name;
                }
                nodesArr.push({id: i, label: name});
            });

            // FIXME: duplicated code
            var edges = [];
            $.each(configData.relationships, function(i, el) {
                if (el.to && el.from) {
                    console.log(el);
                    var from = _.findIndex(configData.nodes, {labels: [el.from.label]});
                    var to = _.findIndex(configData.nodes, {labels: [el.to.label]});

                    var edge = {from: from, arrows: "to", to: to, label: el.name};
                    edges.push(edge);
                }

            });

            var container = document.getElementById('networkViz');
            var data = {
                nodes: new vis.DataSet(nodesArr),
                config: {},
                edges: new vis.DataSet(edges)
            };
            var options = {};

            network = new vis.Network(container, data, options);

            console.log("network drawn");
        }

        function updateNetworkViz() {
            var nodesArr = [];
            $.each(configData.nodes, function(i, el){
                console.log(el);
                var name = '';
                if (el.labels) {
                    name = el.labels[0];
                } else {
                    name = el.filename || name;
                }
                nodesArr.push({id: i, label: name});
            });

            var edges = [];
            $.each(configData.relationships, function(i, el) {

                if (el.from && el.to) {

                    console.log(el);
                    var from = _.findIndex(configData.nodes, {labels: [el.from.label]});
                    var to = _.findIndex(configData.nodes, {labels: [el.to.label]});

                    var edge = {from: from, arrows: "to", to: to, label: el.name};
                    edges.push(edge);
                }

            });

            console.log(edges);

            var data = {
                nodes: new vis.DataSet(nodesArr),
                config: {},
                edges: new vis.DataSet(edges)
            };

            network.setData(data);
        }

        function handleUpdateLabel(e) {
            // figure out which file the update belongs to
            // update the config data
            // call drawNetworkViz()
            console.log(e);
            var filename = $(e.target).data("id");
            console.log(filename);
            var node = _.find(configData.nodes, {filename: filename});
            node['labels'] = [$(e.target).val()];
            console.log(configData);
            drawNetworkViz();
        }

        function drawRelationshipTable(){
            var relTableBody = $('#relTableBody');
            _.forEach(configData.relationships, function(rel, i) {
                if (rel.from && rel.to) {
                    var row = "<tr>";
                    row += "<td>" + rel.from.label + ":" + rel.from.neoKey + "</td>";
                    row += "<td>" + rel.name + "</td>";
                    row += "<td>" + rel.to.label + ":" + rel.to.neoKey + "</td>";
                    relTableBody.append(row);
                }

            })
        }

        // TODO: build config objects here as form is manipulated instead of passing formdata to server


        // UI handlers
        $('.labelInput').change(function(e){handleUpdateLabel(e)});

        $('#createRelButton').click(function() {
            var from = $('#fromInput').val();
            var to = $('#toInput').val();
            var relName = $('#nameInput').val();
            var filename = $('#filenameInput').val();

            // FIXME: this will be replaced when moving to drop downs in modal
            var fromArr = from.split(":");
            var toArr = to.split(":");
            var fromLabel = fromArr[0];
            var fromKey = fromArr[1];
            var fromFileKey = fromArr[2];

            var toArr = to.split(":");
            var toLabel = toArr[0];
            var toKey = toArr[1];
            var toFileKey = toArr[2];


            var createdNewRelationship = false;
            var newRel = _.find(configData.relationships, {filename: filename});

            if (!newRel) {
                newRel = {};
                createdNewRelationship = true;
            }

            newRel['name'] = relName;
            newRel['filename'] = filename;
            var fromObj = {};
            fromObj['label'] = fromLabel;
            fromObj['neoKey'] = fromKey;
            fromObj['fileKey'] = fromFileKey;
            var toObj = {};
            toObj['label'] = toLabel;
            toObj['neoKey'] = toKey;
            toObj['fileKey'] = toFileKey;

            newRel['from'] = fromObj;
            newRel['to'] = toObj;

            // TODO: get relationship filename
            // TODO: get from filename
            // TODO: get to filename
            // TODO: get from filekey
            // TODO: get to filekey


            if (createdNewRelationship) {
                configData.relationships.push(newRel);
            }

            console.log(configData);

            drawRelationshipTable();
            updateNetworkViz();

        });


        // need way of going from an event / input target to the node object
        // filename / property
        // TODO: rename handler
        $('.renameLabel').change(function(e){
           // get node from config
            // set neoKey
            var filename = $(e.target).data("filename");
            var field = $(e.target).data("field");

            var node = _.find(configData.nodes, {filename: filename});
            var property = _.find(node.properties, {headerKey: field});

            property['neoKey'] = $(e.target).val();

            console.log(configData);
        });

        // TODO: include checkbox handler

        $('.skipCheckBox').change(function(e){
            var filename = $(e.target).data("filename");
            var field = $(e.target).data("field");

            var node = _.find(configData.nodes, {filename: filename});
            var property = _.find(node.properties, {headerKey: field});

            if ($(e.target).is(':checked')) {
                property['skip'] = true;
            } else {
                property['skip'] = false;
            }

            console.log(configData);

        });
        // TODO: PK checkbox handler
        $('.pkcheckbox').change(function(e){
            var filename = $(e.target).data("filename");
            var field = $(e.target).data("field");

            var node = _.find(configData.nodes, {filename: filename});
            var property = _.find(node.properties, {headerKey: field});

            if ($(e.target).is(':checked')) {
                property['primaryKey'] = true;
            } else {
                property['primaryKey'] = false;
            }

            // TODO: toggle index for this property automatically
            console.log(configData);

        });


        // TODO: Datatype dropdown handler
        // TODO: Create index handler
        $('.indexcheckbox').change(function(e){
            var filename = $(e.target).data("filename");
            var field = $(e.target).data("field");

            var node = _.find(configData.nodes, {filename: filename});
            var property = _.find(node.properties, {headerKey: field});

            if ($(e.target).is(':checked')) {
                property['index'] = true;
            } else {
                property['index'] = false;
            }

            console.log(configData);

        });

        // TODO: FK handler

        $('#submit').click(function(e){
            e.preventDefault();

            $.ajax({
                type: 'POST',
                data: JSON.stringify(configData),
                contentType: 'application/json',
                url: '/datamodel',
                success: function(data) {
                    window.location.href = '/import';
                }
            })
        });


        drawNetworkViz();
        drawRelationshipTable();  // FIXME: only skeleton of relationship object at load. dont' add row if missing properties
    });
</script>