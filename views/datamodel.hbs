<style type="text/css">
    #networkViz {
        width: 400px;
        height: 400px;
        border: 1px solid lightgray;
    }
</style>

<div class="alert alert-info alert-dismissible" role="alert">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    Now we're ready to configure the property graph data model. Step 1) Declare Label names for each Node. Step 2) Select which column defines the primary key for each Node. Optionally, rename or skip any columns. Step 3) Create relationships with the "Create New" button. When your data model is defined, click the Next button to begin import to Neo4j.
</div>

<div class="row">
    <div class="col-xs-6">
        <h3>Relationships</h3>
        <table class="table">
            <tbody id="relTableBody">
                <tr>
                    <th>From</th>
                    <th>Name</th>
                    <th>To</th>
                </tr>

            </tbody>
            <tfoot>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <!--<td><button class="btn btn-primary btn-sm" id="modalToggleButton">Create New</button></td> -->
            </tr>
            </tfoot>
        </table>
    </div>
    <div class="col-xs-6" id="networkViz">
        <!-- <img src="http://placehold.it/350x400"> -->
    </div>
</div>
<div>
<!--<div class="row"> -->

    <div>

        <!-- Nav tabs -->
        <div class="row" style="padding:20px;">
            <div class="col-sm-10">
                <ul class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="active"><a href="#nodesTab" role="tab" data-toggle="tab">Nodes</a></li>
                    <li role="presentation"><a href="#relsTab" role="tab" data-toggle="tab" id="relationshipTabNav">Relationships</a></li>
                </ul>
            </div>
            <div class="col-sm-2">
                <div class="btn-toolbar" role="toolbar" aria-label="fileActionButtons">
                    <!-- <div class="btn-group btn-group-sm" role="group" aria-label="newActionButtons">
                        <button type="button" class="btn btn-default">New Node</button>
                        <button type="button" class="btn btn-default">New Relationship</button>
                    </div> -->
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="submit" id="submit" class="btn btn-success">Import >></button>
                    </div>
                </div>
            </div>
        </div>

        <div class="tab-content">
            <div role="tabpanel active" class="tab-pane active" id="nodesTab">
                <div class="row">
                    <div class="col-sm-10">
                        <ul class="nav nav-tabs" role="tablist" id="nodeTabList">
                            {{# each config.nodes}}
                                <li role="presentation" class="nodeTabListItem"><a href="#{{guid}}" aria-controls="{{guid}}" role="tab" data-toggle="tab" id="{{guid}}-tabAnchor">{{filename}}</a></li>
                            {{/each}}

                        </ul>
                    </div>
                    <div class="col-sm-2">
                        <button class="btn btn-default btn-xs" id="newNodeButton" data-toggle="modal" data-target="#newNodeModal">New Node</button>
                    </div>
                </div>


                <div class="tab-content" id="tab-content-nodes">
                    {{# each config.nodes}}
                        <div role="tabpanel" class="tab-pane node-tab-pane" id="{{guid}}">
                            <div class="{{guid}}-nodePaneDiv">
                                <div id="{{guid}}-datamodelPane">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="form-group">
                                                <label for="{{guid}}-labelInput" class="col-sm-2 control-label">Label</label>
                                                <div class="col-sm-10" style="padding:20px;">
                                                    <input type="text" class="form-control labelInput" name="{{guid}}-labelInput" data-id="{{guid}}" id="{{guid}}-labelInput" placeholder="Node" required>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <table class="table">
                                        <tbody>
                                        <tr>
                                            <th>Column</th>
                                            <th>Rename</th>
                                            <th>Skip <button type="button" class="btn btn-default btn-xs" id="toggleSkipButton">Toggle All</button></th>
                                            <th>PK</th>
                                            <th>Datatype</th>
                                            <th>Create Index</th>
                                            <!-- <th>FK</th> -->
                                        </tr>
                                        {{# each properties}}
                                            <tr>
                                                <td>{{headerKey}}</td>
                                                <td><label><input class="renameLabel" data-guid="{{../guid}}" data-field="{{headerKey}}" type="text" name="{{../guid}}-{{headerKey}}-rename"></label></td>
                                                <td><label><input class="skipCheckBox" data-guid="{{../guid}}" data-field="{{headerKey}}" type="checkbox" name="{{../guid}}-{{headerKey}}-skip"></label></td>
                                                <td><label><input type="checkbox" data-guid="{{../guid}}" data-field="{{headerKey}}" class="pkcheckbox" name="{{../guid}}-{{headerKey}}-pk"></label></td>
                                                <td><label><select data-guid="{{../guid}}" data-field="{{headerKey}}" class="datatypeselect">
                                                    <option value="string">string</option>
                                                    <option value="integer">integer</option>
                                                    <option value="float">float</option>
                                                </select></label></td>
                                                <td><label><input class="indexCheckbox" type="checkbox" data-guid="{{../guid}}" data-field="{{headerKey}}" id="{{../guid}}-{{headerKey}}-index" name="{{../guid}}-{{headerKey}}-index"></label></td>
                                                <!-- <td><button type="button" class="btn btn-sm">---</button></td> -->
                                            </tr>
                                        {{/each}}

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    {{/each}}
                </div>
            </div>

            <div role="tabpanel active" class="tab-pane" id="relsTab">
                <div class="row">
                    <div class="col-sm-10">
                        <ul class="nav nav-tabs col-sm-8" role="tablist" id="relTablist">

                            {{# each config.relationships}}
                                <li role="presentation" class="relTabListItem"><a href="#{{guid}}" aria-controls="{{guid}}" role="tab" data-toggle="tab" id="{{guid}}-tabAnchor">{{filename}}</a></li>
                            {{/each}}
                        </ul>
                    </div>
                    <div class="col-sm-2">
                        <button class="btn btn-default btn-xs" id="newRelationshipButton" data-toggle="modal" data-target="#newRelModalFileSelect">New Relationship</button>
                    </div>
                </div>

                <div class="tab-content tab-content-rels">
                    {{# each config.relationships}}
                        <div role="tabpanel" class="tab-pane rel-tab-pane" id="{{guid}}">
                                <form class="form-horizontal">
                                    <div class="row col-sm-12">
                                <div class="form-group">
                                    <!-- FROM -->
                                    <label for="{{guid}}-fromLabelSelect" class="col-sm-4 control-label">From - Label</label>
                                    <div class="col-sm-8">
                                        <select class="form-control labelSelect fromLabelSelect" id="{{guid}}-fromLabelSelect" data-guid="{{guid}}"><option value="---">Label</option></select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="{{guid}}-fromNeoKeySelect" class="col-sm-4 control-label">From - neoKey</label>
                                    <div class="col-sm-8">
                                        <select class="form-control" id="{{guid}}-fromNeoKeySelect" data-guid="{{guid}}" disabled><option value="---">Label</option></select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="{{guid}}-fromHeaderKeySelect" class="col-sm-4 control-label">From - headerKey</label>
                                    <div class="col-sm-8">
                                        <select class="form-control" id="{{guid}}-fromHeaderKeySelect" data-guid="{{guid}}" disabled><option value="---"></option></select>
                                    </div>
                                </div>

                                <!-- TO -->
                                <div class="form-group">
                                    <label for="{{guid}}-toLabelSelect" class="col-sm-4 control-label">To - label</label>
                                    <div class="col-sm-8">
                                        <select class="form-control labelSelect toLabelSelect" id="{{guid}}-toLabelSelect" data-guid="{{guid}}"><option value="---">Label</option></select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="{{guid}}-toNeoKeySelect" class="col-sm-4 control-label">To - neoKey</label>
                                    <div class="col-sm-8">
                                        <select class="form-control" id="{{guid}}-toNeoKeySelect" data-guid="{{guid}}" disabled><option value="---">Label</option></select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="{{guid}}-toHeaderKeySelect" class="col-sm-4 control-label">To - headerKey</label>
                                    <div class="col-sm-8">
                                        <select class="form-control" id="{{guid}}-toHeaderKeySelect" data-guid="{{guid}}" disabled><option value="---">Label</option></select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="{{guid}}-nameInput" class="col-sm-2 control-label">Relationship name</label>
                                    <div class="col-sm-10">
                                        <input type="text" class="form-control" id="{{guid}}-nameInput" data-guid="{{guid}}" placeholder="SERVES_ON">
                                    </div>
                                </div>

                                <input type="hidden" id="{{guid}}-filenameInput" data-guid="{{guid}}" value="{{filename}}">
                                <!--<div class="form-group">
                                    <label for="{{guid}}-filenameInput" class="col-sm-2 control-label">Filename</label>
                                    <div class="col-sm-10">
                                        <select class="form-control" id="{{guid}}-filenameInput" data-guid="{{guid}}">
                                            {{# each ../files }}
                                                <option value="{{this}}">{{this}}</option>
                                            {{/each}}
                                        </select>
                                    </div>
                                </div> -->

                                <div class="form-group">
                                    <div class="col-sm-offset-2 col-sm-10">
                                        <button type="submit" class="btn btn-default config-rel-button" data-guid="{{guid}}">Add Relationship</button>
                                    </div>
                                </div>
                                    </div>
                            </form>
                        </div>
                    {{/each}}
                </div>
            </div>

        </div>

    </div>
    </div>

<!-- New Relationship Modal -->
<div class="modal fade" id="newRelModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <button type="button" class="close"
                        data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    Create Relationship
                </h4>
            </div>

            <!-- Modal Body -->
            <div class="modal-body">



                <form class="form-horizontal">
                    <div class="form-group">
                        <!-- FROM -->
                        <label for="fromLabelSelect" class="col-sm-4 control-label">From - Label</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="fromLabelSelect"><option value="---">Label</option></select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="fromNeoKeySelect" class="col-sm-4 control-label">From - neoKey</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="fromNeoKeySelect" disabled><option value="---">Label</option></select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="fromHeaderKeySelect" class="col-sm-4 control-label">From - headerKey</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="fromHeaderKeySelect" disabled><option value="---">Label</option></select>
                        </div>
                    </div>

                    <!-- TO -->
                    <div class="form-group">
                        <label for="toLabelSelect" class="col-sm-4 control-label">To - label</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="toLabelSelect"><option value="---">Label</option></select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="toNeoKeySelect" class="col-sm-4 control-label">To - neoKey</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="toNeoKeySelect" disabled><option value="---">Label</option></select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="toHeaderKeySelect" class="col-sm-4 control-label">To - headerKey</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="toHeaderKeySelect" disabled><option value="---">Label</option></select>
                        </div>
                    </div>


                    <div class="form-group">
                        <label for="nameInput" class="col-sm-2 control-label">Relationship name</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="nameInput" placeholder="SERVES_ON">
                        </div>
                    </div>


                    <div class="form-group">
                        <label for="filenameInput" class="col-sm-2 control-label">Filename</label>
                        <div class="col-sm-10">
                            <select class="form-control" id="filenameInput" placeholder="legislators.csv">
                            {{# each files}}
                                <option value="{{this}}">{{this}}</option>
                            {{/each}}


                            </select>

                        </div>
                    </div>

                </form>

            <!-- Modal Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    Close
                </button>
                <button type="button" id="createRelButton" class="btn btn-primary" data-dismiss="modal">
                    Create
                </button>
            </div>
        </div>
    </div>
</div>
    </div>

<!-- New Node modal -->
<div class="modal fade" id="newNodeModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title">
                    Create New Node
                </h4>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="newNodeFileSelect">Choose file</label>
                        <select id="newNodeFileSelect">
                            {{# each files }}
                                <option value="{{this}}">{{this}}</option>
                            {{/each}}
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="fileForNewNodeSelectedButton" class="btn btn-primary" data-dismiss="modal">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- New relationship modal -->
<div class="modal fade" id="newRelModalFileSelect" tabindex="-1" role="dialog" aria-hidden="true">
    <div class=modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title">
                    Create New Relationship
                </h4>
            </div>

            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="newRelFileSelect">Choose file</label>
                        <select id="newRelFileSelect">
                            {{# each files}}
                                <option value="{{this}}">{{this}}</option>
                            {{/each}}
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="fileForNewRelSelectedButton" class="btn btn-primary" data-dismiss="modal">Create</button>
            </div>
        </div>
    </div>
</div>

<script>
    var configData = JSON.parse('{{{stringify this.config}}}');
    console.log(configData);
    var network; // network viz

    // iterate through all relationships and hide the filename-node-pane element for that file
    // toggle the node button off
    // toggle the relationship button on

    // TODO: move into document.ready
//    _.forEach(configData.relationships, function(relObject) {
//       var filename = relObject.filename.split(".").join("");
//        console.log(filename);
//        $('#'+filename +'-datamodel-pane').remove();
//        $('#'+filename + '-node-button').prop('disabled', true).removeClass("active");
//        $('#'+filename + '-rel-button').prop('disabled', false).addClass("active");
//        //$('#'+filename + '-nodePaneDiv').empty();
//        $('#'+filename + '-rel-message').show();
//
//    });

    $(function() {
        // set first tab as active
        //$('.nav-tabs li').first().show();
        //$('.nav-tabs li').first().addClass("active");
        //$('.tab-pane').first().addClass("active");

        $('.nodeTabListItem').first().addClass("active");
        $('.relTabListItem').first().addClass("active");
        $('.node-tab-pane').first().addClass("active");
        $('.rel-tab-pane').first().addClass("active");

//        $("ul.nav-tabs a").click(function (e) {
//            e.preventDefault();
//            $(this).tab('show');
//        });

        function drawNetworkViz() {
            var nodesArr = [];
            $.each(configData.nodes, function(i, el){
                console.log(el);
                var name = '';
                if (el.labels) {
                    name = el.labels[0];
                } else {
                    name = el.filename || name;
                }
                nodesArr.push({id: i, label: name});
            });

            // FIXME: duplicated code
            var edges = [];
            $.each(configData.relationships, function(i, el) {
                if (el.to && el.from) {
                    console.log(el);
                    var from = _.findIndex(configData.nodes, {labels: [el.from.label]});
                    var to = _.findIndex(configData.nodes, {labels: [el.to.label]});

                    var edge = {from: from, arrows: "to", to: to, label: el.name};
                    edges.push(edge);
                }

            });

            var container = document.getElementById('networkViz');
            var data = {
                nodes: new vis.DataSet(nodesArr),
                config: {},
                edges: new vis.DataSet(edges)
            };
            var options = {};

            network = new vis.Network(container, data, options);

            console.log("network drawn");
        }

        function updateNetworkViz() {
            var nodesArr = [];
            $.each(configData.nodes, function(i, el){
                console.log(el);
                var name = '';
                if (el.labels) {
                    name = el.labels[0];
                } else {
                    name = el.filename || name;
                }
                nodesArr.push({id: i, label: name});
            });

            var edges = [];
            $.each(configData.relationships, function(i, el) {

                if (el.from && el.to) {

                    console.log(el);
                    var from = _.findIndex(configData.nodes, {labels: [el.from.label]});
                    var to = _.findIndex(configData.nodes, {labels: [el.to.label]});

                    var edge = {from: from, arrows: "to", to: to, label: el.name};
                    edges.push(edge);
                }

            });

            //console.log(edges);

            var data = {
                nodes: new vis.DataSet(nodesArr),
                config: {},
                edges: new vis.DataSet(edges)
            };

            network.setData(data);
        }

        function handleUpdateLabel(e) {
            // figure out which file the update belongs to
            // update the config data
            // call drawNetworkViz()
            console.log(e);
            var guid = $(e.target).data("id");
            var node = _.find(configData.nodes, {guid: guid});
            node['labels'] = [$(e.target).val()];
            console.log(configData);

            $('#' + guid + '-tabAnchor').html($(e.target).val());
            drawNetworkViz();
            populateLabelSelects();
        }

        function drawRelationshipTable(){
            var relTableBody = $('#relTableBody').children().not(':first').remove();
            _.forEach(configData.relationships, function(rel, i) {
                if (rel.from && rel.to) {
                    var row = "<tr>";
                    row += "<td>" + rel.from.label + ":" + rel.from.neoKey + "</td>";
                    row += "<td>" + rel.name + "</td>";
                    row += "<td>" + rel.to.label + ":" + rel.to.neoKey + "</td>";
                    $('#relTableBody').append(row);
                }

            })
        }

        function updateUIListeners() {
            // UI handlers
            $('.labelInput').unbind().change(function(e){handleUpdateLabel(e)});

            $('#createRelButton').unbind().click(function() {

                // TODO: This logic should be moved into relationship pane
                var relName = $('#nameInput').val();
                var filename = $('#filenameInput').val();

                var fromLabel = $('#fromLabelSelect').val();
                var fromKey = $('#fromNeoKeySelect').val();
                var fromFileKey = $('#fromHeaderKeySelect').val();

                //var toArr = to.split(":");

                var toLabel = $('#toLabelSelect').val();
                var toKey = $('#toNeoKeySelect').val();
                var toFileKey = $('#toHeaderKeySelect').val();


                var createdNewRelationship = false;
                // FIXME: need to find on a guid here not a filename
                var newRel = _.find(configData.relationships, {filename: filename});

                if (!newRel) {
                    newRel = {};
                    createdNewRelationship = true;
                }

                newRel['name'] = relName;
                newRel['filename'] = filename;
                var fromObj = {};
                fromObj['label'] = fromLabel;
                fromObj['neoKey'] = fromKey;
                fromObj['fileKey'] = fromFileKey;
                var toObj = {};
                toObj['label'] = toLabel;
                toObj['neoKey'] = toKey;
                toObj['fileKey'] = toFileKey;

                newRel['from'] = fromObj;
                newRel['to'] = toObj;


                if (createdNewRelationship) {
                    configData.relationships.push(newRel);
                }

                console.log(configData);

                drawRelationshipTable();
                updateNetworkViz();

            });

            $('.renameLabel').unbind().change(function(e){

                var guid = $(e.target).data("guid");
                var field = $(e.target).data("field");

                var node = _.find(configData.nodes, {guid: guid});
                var property = _.find(node.properties, {headerKey: field});
                property['neoKey'] = $(e.target).val();

                console.log(configData);
            });

            $('.skipCheckBox').unbind().change(function(e){
                var guid = $(e.target).data("guid");
                var field = $(e.target).data("field");

                var node = _.find(configData.nodes, {guid: guid});
                var property = _.find(node.properties, {headerKey: field});

                if ($(e.target).is(':checked')) {
                    property['skip'] = true;
                } else {
                    property['skip'] = false;
                }

                console.log(configData);

            });


            $('.pkcheckbox').unbind().change(function(e){
                var guid = $(e.target).data("guid");
                console.log(guid);
                var field = $(e.target).data("field");

                var node = _.find(configData.nodes, {guid: guid});
                var property = _.find(node.properties, {headerKey: field});

                if ($(e.target).is(':checked')) {
                    property['primaryKey'] = true;
                    $('#' + guid + '-' + field + '-index').prop('checked', $(e.target).is(':checked'));
                    $('.pkcheckbox[data-guid="' + guid + '"]').prop("disabled", true);
                    $(e.target).prop("disabled", false);

                } else {
                    property['primaryKey'] = false;
                    $('.pkcheckbox[data-guid="' + guid + '"]').prop("disabled", false);
                }



                console.log(configData);

            });

            $('.datatypeselect').unbind().change(function(e){
                var guid = $(e.target).data("guid");
                var field = $(e.target).data("field");

                var node = _.find(configData.nodes, {guid: guid});
                var property = _.find(node.properties, {headerKey: field});

                property['dataType'] = $(e.target).val();
                console.log(configData);
            });

            // TODO: Create index handler
            $('.indexCheckbox').unbind().change(function(e){
                var guid = $(e.target).data("guid");
                var field = $(e.target).data("field");

                var node = _.find(configData.nodes, {guid: guid});
                var property = _.find(node.properties, {headerKey: field});

                if ($(e.target).is(':checked') && !$('#' + guid + '-' + field + 'pk').is(":checked")) {
                    property['index'] = true;
                } else {
                    property['index'] = false;
                }

                console.log(configData);

            });

            // TODO: FK handler

            $('#submit').unbind().click(function(e){
                // TODO: validate configuration object at this point
                e.preventDefault();

                // check for PK
                var numNodes = configData.nodes.length;

                var numPKs = $('.pkcheckbox:checked').length;
                var numLabels = $(".labelInput").filter(function(){ return this.value != "";}).length;
                console.log("numLabels " + numLabels);

                if (numNodes != numPKs) {
                    alert("Please select a Primary Key for each Node.");
                } else if (numNodes != numLabels) {
                    alert("Please enter a Label for each Node.");
                } else {
                    $.ajax({
                        type: 'POST',
                        data: JSON.stringify(configData),
                        contentType: 'application/json',
                        url: '/datamodel',
                        success: function(data) {
                            window.location.href = '/import';
                        }
                    })
                }

            });

            $('.fromLabelSelect').unbind().change(function(e){

                updateFromLabelSelects($(e.target));

            });

            $('.toLabelSelect').unbind().change(function(e){
                updateToLabelSelects($(e.target));
            });


            $('#modalToggleButton, #relationshipTabNav').unbind().click(function(e) {
                console.log("dont' show the modal");

                // data-toggle="modal" data-target="#newRelModal"

                var inputs = $('.labelInput');

                for (var i=0;i<inputs.length;i++) {
                    if ($(inputs[i]).val() === '') {
                        alert("Please select labels for all Nodes before adding relationships.");
                        return false;
                    }
                }

                if ($(this).is('#modalToggleButton')) {
                    $('#newRelModal').modal('toggle');
                }


            });


            $('#toggleSkipButton').unbind().click(function(e){
                $("input[type='checkbox']:visible.skipCheckBox").prop("checked", function( i, val ) {
                    return !val;
                }).change();
            });

            $('.config-rel-button').unbind().click(function(e){
                var target = $(this);
                var guid = $(this).data("guid");
                e.preventDefault();

                var relName = $('#'+ guid + '-nameInput').val();
                var fileName= $('#' + guid + '-filenameInput').val();

                var fromLabel = $('#' + guid +'-fromLabelSelect').val();
                var fromKey = $('#' + guid + '-fromNeoKeySelect').val();
                var fromFileKey = $('#' + guid + '-fromHeaderKeySelect').val();

                var toLabel = $('#' + guid + '-toLabelSelect').val();
                var toKey = $('#' + guid + '-toNeoKeySelect').val();
                var toFileKey = $('#' + guid + '-toHeaderKeySelect').val();

                var createdNewRelationship = false;

                var newRel = _.find(configData.relationships, {guid: guid});

                if (!newRel) {
                    newRel = {};
                    createdNewRelationship = true;
                }

                newRel['name'] = relName;
                newRel['filename'] = fileName;

                var fromObj = {};
                fromObj['label'] = fromLabel;
                fromObj['neoKey'] = fromKey;
                fromObj['fileKey'] = fromFileKey;

                var toObj = {};
                toObj['label'] = toLabel;
                toObj['neoKey'] = toKey;
                toObj['fileKey'] = toFileKey;

                newRel['from'] = fromObj;
                newRel['to'] = toObj;

                if (createdNewRelationship) {
                    configData.relationships.push(newRel);
                }

                $('#' + guid + '-tabAnchor').html(relName);

                console.log(configData);

                drawRelationshipTable();
                updateNetworkViz();



            });

            $('#fileForNewNodeSelectedButton').unbind().click(function(e) {
                var filename = $('#newNodeFileSelect').val();
                console.log("adding a new node for file: " + filename);
                var newNode = {};
                newNode['guid'] = guidShort();
                var guid = newNode['guid'];
                newNode['labels'] = [];
                newNode['filename'] = filename;
                newNode['properties'] = [];
                var propertiesArr = _.first(_.filter(configData.nodes, {filename: filename}))['properties'];
                console.log(propertiesArr);
                var properties = _.pluck(propertiesArr, 'headerKey');
                console.log(properties);

                _.each(properties, function(prop){
                    var obj = {};
                    obj['headerKey'] = prop;
                    obj['neoKey'] = prop;
                    obj['dataType'] = 'string';
                    obj['primaryKey'] = false;
                    obj['skip'] = false;
                    newNode.properties.push(obj);
                });

                configData.nodes.push(newNode);
                console.log(configData);

                updateNetworkViz();

                // FIXME: use some MVC framework that supports data binding!!!!
                // update Nodes nav tabs with new filename

                $('#nodeTabList').append($('<li></li>')
                        .attr("role", "presentation")
                        .attr("class", "nodeTabListItem")
                        .append($('<a></a>')
                                .attr("href", '#' + guid)
                                .attr("aria-controls", guid)
                                .attr("role", "tab")
                                .attr("data-toggle", "tab")
                                .attr("id", guid+'-tabAnchor')
                                .text(filename)));

                // update nodes config table

                var newNodePanel = '<div role="tabpanel" class="tab-pane node-tab-pane" id="' + guid + '">';
                newNodePanel +=     '<div class="' +  guid + '-nodePaneDiv">';
                newNodePanel +=         '<div id="' + guid + '-datamodelPane">';
                newNodePanel +=             '<div class="row">';
                newNodePanel +=                 '<div class="col-sm-6">';
                newNodePanel +=                     '<div class="form-group">';
                newNodePanel +=                         '<label for="' + guid + '-labelInput" class="col-sm-2 control-label">Label</label>';
                newNodePanel +=                         '<div class="col-sm-10" style="padding:20px;">';
                newNodePanel +=                             '<input type="text" class="form-control labelInput" name="' + guid + '-labelInput" data-id="' + guid + '" id="' + guid + '-labelInput" placeholder="Node" required>';

                newNodePanel +=                             '</div> <!-- /div.col-sm-10';
                newNodePanel +=                         '</div> <!-- /form-group -->';
                newNodePanel +=                     '</div> <!-- /col-sm-6 -->';
                newNodePanel +=                 '</div> <!-- /row -->';

                newNodePanel +=             '<table class="table">';
                newNodePanel +=                 '<tbody>';
                newNodePanel +=                     '<tr><th>Column</th><th>Rename</th><th>Skip <button type="button" class="btn btn-default btn-xs" id="toggleSkipButton">Toggle All</button></th><th>PK</th><th>Datatype</th><th>Create Index</th></tr>'; // Remove FK row

                _.forEach(properties, function(field) {
                    var row = '<tr>';
                    row += '<td>' + field + '</td>';
                    row += '<td>' + '<label><input class="renameLabel" data-guid="' + guid + '" data-field="' + field + '" type="text" name="' + guid + '-' + field + '-rename"></label> </td>';
                    row += '<td>' + '<label><input class="skipCheckBox" data-guid="' + guid + '" data-field="' + field + '" type="checkbox" name="' + guid + '-' + field + '-skip"></label> </td>';
                    row += '<td>' + '<label><input class="pkcheckbox" data-guid="' + guid + '" data-field="' + field + '" type="checkbox" name="' + guid + '-' + field + '-pk"></label> </td>';
                    row += '<td><label><select data-guid="' + guid + '" data-field="' + field + '" class="datatypeselect"><option value="string">string</option><option value="integer">integer</option><option value="float">float</option></select> </label></td>';

                    row += '<td>' + '<label><input class="indexCheckbox" data-guid="' + guid + '" data-field="' + field + '" type="checkbox" id="' + guid + '-' + field + '-index" name="' + guid + '-' + field + '-index"></label> </td>';
                    //row += '<td><button type="button" class="btn btn-sm">---</button>';

                    row += '</tr>';
                    newNodePanel += row;

                });

                newNodePanel +=                 '</tbody>';
                newNodePanel +=             '</table>';
                newNodePanel +=             '</div> <!-- /datamodelPane -->';
                newNodePanel +=         '</div> <!-- /nodePaneDiv --> ';
                newNodePanel +=     '</div> <!-- /tabpanel -->';

                $('#tab-content-nodes').append($(newNodePanel));

                updateUIListeners();



            });

            $('#fileForNewRelSelectedButton').unbind().click(function(e) {
                var filename = $('#newRelFileSelect').val();
                console.log("adding a new rel for file: " + filename);
                var newRel = {};
                newRel['guid'] = guidShort();
                var guid = newRel['guid'];
                newRel['filename'] = filename;

                configData.relationships.push(newRel);
                console.log(configData);

                updateNetworkViz();

                $('#relTablist').append($('<li></li>')
                        .attr("role", "presentation")
                        .attr("class", "relTabListItem")
                        .append($('<a></a>')
                            .attr("href", "#"+guid)
                            .attr("aria-controls", guid)
                            .attr("role", "tab")
                            .attr("data-toggle", "tab")
                            .attr("id", guid + "-tabAnchor")
                            .text(filename)));

                var newRelPanel =   '<div role="tabpanel" class="tab-pane rel-tab-pane" id="' + guid + '">';
                newRelPanel +=          '<form class="form-horizontal">';
                newRelPanel +=              '<div class="row col-sm-12">';

                // FROM

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<label for="' + guid + '-fromLabelSelect" class="col-sm-4 control-label">From - Label</label>';
                newRelPanel +=                      '<div class="col-sm-8">';
                newRelPanel +=                          '<select class="form-control labelSelect fromLabelSelect" id="' + guid + '-fromLabelSelect" data-guid="' + guid +'">';

                var allLabels = getAllLabels();

                _.forEach(allLabels, function(label) {
                    newRelPanel +=                          '<option value="' + label +'">' + label + '</option>';
                });
                newRelPanel +=                          '</select>';
                newRelPanel +=                      '</div>'; // ./.col-sm-8
                newRelPanel +=                  '</div>'; // ./form-group

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<label for="' + guid +'-fromNeoKeySelect" class="col-sm-4 control-label">From - neoKey</label>';
                newRelPanel +=                      '<div class="col-sm-8">';
                newRelPanel +=                          '<select class="form-control" id="' + guid +'-fromNeoKeySelect" data-guid="' + guid +'">';

                _.forEach(neoKeysForLabel(_.first(allLabels)), function(key) {
                    newRelPanel +=                          '<option value="' + key + '">' + key + '</option>';
                    console.log("Adding OPTION" + key);
                });

                newRelPanel +=                          '</select>';
                newRelPanel +=                      '</div>';
                newRelPanel +=                  '</div>';

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<label for="' + guid +'-fromHeaderKeySelect" class="col-sm-4 control-label">From - headerKey</label>';
                newRelPanel +=                      '<div class="col-sm-8">';
                newRelPanel +=                          '<select class="form-control" id="' + guid +'-fromHeaderKeySelect" data-guid="' + guid +'">';

                _.forEach(neoKeysForLabel(_.first(allLabels)), function(key) {
                    newRelPanel +=                          '<option value="' + key + '">' + key + '</option>';
                });

                newRelPanel +=                          '</select>';
                newRelPanel +=                      '</div>';
                newRelPanel +=                  '</div>';

                // TO

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<label for="' + guid + '-toLabelSelect" class="col-sm-4 control-label">To - Label</label>';
                newRelPanel +=                      '<div class="col-sm-8">';
                newRelPanel +=                          '<select class="form-control labelSelect toLabelSelect" id="' + guid + '-toLabelSelect" data-guid="' + guid +'">';

                _.forEach(allLabels, function(label) {
                    newRelPanel +=                          '<option value="' + label +'">' + label + '</option>';
                });
                newRelPanel +=                          '</select>';
                newRelPanel +=                      '</div>'; // ./.col-sm-8
                newRelPanel +=                  '</div>'; // ./form-group

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<label for="' + guid +'-toNeoKeySelect" class="col-sm-4 control-label">To - neoKey</label>';
                newRelPanel +=                      '<div class="col-sm-8">';
                newRelPanel +=                          '<select class="form-control" id="' + guid +'-toNeoKeySelect" data-guid="' + guid +'">';

                _.forEach(neoKeysForLabel(_.first(allLabels)), function(key) {
                    newRelPanel +=                          '<option value="' + key + '">' + key + '</option>';
                });

                newRelPanel +=                          '</select>';
                newRelPanel +=                      '</div>';
                newRelPanel +=                  '</div>';

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<label for="' + guid +'-toHeaderKeySelect" class="col-sm-4 control-label">To - headerKey</label>';
                newRelPanel +=                      '<div class="col-sm-8">';
                newRelPanel +=                          '<select class="form-control" id="' + guid +'-toHeaderKeySelect" data-guid="' + guid +'">';

                _.forEach(neoKeysForLabel(_.first(allLabels)), function(key) {
                    newRelPanel +=                          '<option value="' + key + '">' + key + '</option>';
                });

                newRelPanel +=                          '</select>';
                newRelPanel +=                      '</div>';
                newRelPanel +=                  '</div>';

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<label for="' + guid + '-nameInput" class="col-sm-2 control-label">Relationship name</label>';
                newRelPanel +=                  '<div class="col-sm-10">';
                newRelPanel +=                     '<input type="text" class="form-control" id="' + guid + '-nameInput" data-guid="' + guid + '" placeholder="SERVES_ON">';
                newRelPanel +=                  '</div>';
                newRelPanel +=                  '</div>';

                newRelPanel +=                  '<input type="hidden" id="' + guid + '-filenameInput" data-guid="' + guid + '" value="' + filename +'">';

                newRelPanel +=                  '<div class="form-group">';
                newRelPanel +=                      '<div class="col-sm-offset-2 col-sm-10">';
                newRelPanel +=                          '<button type="submit" class="btn btn-default config-rel-button" data-guid="' + guid +'">Add Relationship</button>';
                newRelPanel +=                      '</div>';
                newRelPanel +=                  '</div>';


                newRelPanel +=              '</div> <!-- ./row.col-sm-12 -->';
                newRelPanel +=          '</form>';
                newRelPanel +=       '</div> <!-- ./tabpanel -->';

                $('.tab-content-rels').append($(newRelPanel));

                updateUIListeners();




            });


        }




        // TODO: get all labels
        function getAllLabels() {

            var labels = [];
            _.forEach(configData.nodes, function(node) {
                _.forEach(node.labels, function(label) {
                    if (!_.includes(labels, label)) {
                        labels.push(label);
                    }

                })
            });

            console.log(labels);
            return labels;
        }

        // TODO: get all neoKeys (for a given label)
        function neoKeysForLabel(label) {
            var keys = [];
            console.log(label);

            var filteredNodes = _.filter(configData.nodes, function(node) {
                return _.includes(node.labels, label);
            });

            console.log(filteredNodes);

            _.forEach(filteredNodes, function(node){
                _.forEach(node.properties, function(property){
                    keys.push(property.neoKey);
                });

            });

            return keys;
        }

        // TODO: get all neoKeys + headerKeys (for a given label)
        function allKeysForLabel(label) {
            var keys = [];

            var filteredNodes = _.filter(configData.nodes, function(node) {
                return _.includes(node.labels, label);
            });

            console.log(filteredNodes);

            _.forEach(filteredNodes, function(node){
                _.forEach(node.properties, function(property) {
                    keys.push(property.neoKey);
                    if (!_.includes(keys, property.headerKey)) {
                        keys.push(property.headerKey);
                    }
                })

            });

            console.log(keys);
            return keys;
        }

        // TODO: populate from / to dropdowns
        function populateLabelSelects() {
            var labels = getAllLabels();
            console.log(labels);

            $('.labelSelect').empty();
            $.each(labels, function(i, label){
                $('.labelSelect')
                        .append($("<option></option>")
                        .attr("value", label)
                        .text(label));
            });

            updateAllLabelSelects();
            //updateFromLabelSelects();
            //updateToLabelSelects();

        }

        // TODO: input handlers



        // fromLabelSelect handler
        //   - on select make fromNeoKeySelect and fromHeaderKeySelect enabled
        //   - populate fromNeoKeySelect and fromHeaderKeySelect with valid options

        function updateFromLabelSelects(el) {

            var neoKeys = neoKeysForLabel(el.val());
            var allKeys = allKeysForLabel(el.val());
            var guid = el.data("guid");
            var selectInputs = $('#' + guid + '-fromNeoKeySelect, #' + guid + '-fromHeaderKeySelect');

            selectInputs.prop("disabled", false).empty();

            $.each(neoKeys, function(i, key) {
                selectInputs.append($("<option></option>")
                        .attr("value", key)
                        .text(key));
            });


            // FIXME: this doesn't do anything now - should these fields really be actual fields for the selected file??

            $.each(allKeys, function (i, key) {
                $('#fromHeaderKeySelect').append($("<option></option>")
                        .attr("value", key)
                        .text(key));
            })
        }

        function updateToLabelSelects(el) {
            var neoKeys = neoKeysForLabel(el.val());
            var allKeys = allKeysForLabel(el.val());
            var guid = el.data("guid");
            var selectInputs = $('#' + guid + '-toNeoKeySelect, #' + guid + '-toHeaderKeySelect');

            selectInputs.prop("disabled", false).empty();

            $.each(neoKeys, function(i, key) {
                selectInputs.append($("<option></option>")
                        .attr("value", key)
                        .text(key));

            });


            // FIXME: this doesn't do anything now - should these fields really be actual fields for the selected file??

            $.each(allKeys, function (i, key) {
                $('#toHeaderKeySelect').append($("<option></option>")
                        .attr("value", key)
                        .text(key));
            })
        }


        function updateAllLabelSelects() {
            // call updateFromLabelSelects with a selector for all fromLabelSelects
            // call updateToLabelSelects with a selector for all toLabelSelects
            updateFromLabelSelects($('.labelSelect'));
            updateToLabelSelects($('.labelSelect'));


        }

        updateUIListeners();
        populateLabelSelects();
        drawNetworkViz();
        drawRelationshipTable();  // FIXME: only skeleton of relationship object at load. dont' add row if missing properties
    });
</script>

<script src="/js/util.js"></script>